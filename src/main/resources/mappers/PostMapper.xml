<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- <mapper> - XML Mapper는 <mapper></mapper>로 끝난다 <mapper> 태그의 namespace 속성에 Mapper 인터페이스의 경로를 선언하면
     Mapper.java와 XML Mapper가 연결된다. Mapper.java 인터페이스는 XML Mapper에서 메서드명과 동일한 id를 가진 SQL 쿼리를 찾아 실행 -->
<!-- namespace = PostMapper.java와 연결한다. -->
<mapper namespace="com.study.domain.post.PostMapper">

    <!-- <sql> and <include> - MyBatis는 <sql>와 <include> 태그를 이용해서 공통으로 사용되거나 반복적으로 사용되는 쿼리를 처리 가능
        굳이 Java로 비유하자면, 변수로 선언해 두고 필요한 상황에 호출해서 사용하는 개념과 비슷하다. PostMapper.xml의 "postColumns" 와 같이 INSERT 쿼리와 SELECT 쿼리에 주로 사용 -->
    <!-- 각각의 쿼리에 전체 칼럼을 선언해 줘도 되지만, 해당 태그들을 이용하면 코드 라인을 줄일 수 있다. 두 태그의 포인트는 "중복제거" 이며, 동일한 XML Mapper뿐 아니라,
         다른 XML Mapper에 선언된 SQL 조각도 Include 할 수 있다. -->
    <!-- #{}: 프로그래머가 설정한 DB 데이터명, ${}: 컬럼명, 테이블명  -->
    <!-- tb_post 테이블 전체 컬럼 -->
    <sql id="postColumns">
        id
        , title
        , content
        , writer
        , view_cnt
        , notice_yn
        , delete_yn
        , created_date
        , modified_date
    </sql>

    <!-- 게시글 검색 -->
    <sql id="search">
        <!-- 검색 키워드가 있을 때 -->
        <if test="keyword != null and keyword != ''">
            <choose>
                <!-- 검색 유형이 있을 때 -->
                <when test="searchType != null and searchType != ''">
                    <choose>
                        <when test="'title'.equals( searchType )">
                            AND title LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                        <when test="'content'.equals( searchType )">
                            AND content LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                        <when test="'writer'.equals( searchType )">
                            AND writer LIKE CONCAT('%', #{keyword}, '%')
                        </when>
                    </choose>
                </when>

                <!-- 전체 검색일 때 -->
                <otherwise>
                    AND (
                    title LIKE CONCAT('%', #{keyword}, '%')
                    OR content LIKE CONCAT('%', #{keyword}, '%')
                    OR writer LIKE CONCAT('%', #{keyword}, '%')
                    )
                </otherwise>
            </choose>
        </if>
    </sql>

    <!-- parameterType - SQL 쿼리 실행에 필요한 파라미터 타입을 의미
         단일(하나의) 파라미터가 아닌 경우에는 일반적으로 객체를 전달받아 쿼리를 실행 -->
    <!-- useGeneratedKeys - 해당 옵션을 이용하여 true로 설정하면 생성된 게시글의 PK가 ParameterType에
        선언된 요청 객체(params)에 저장, keyProperty에 선언된 id에 값이 매핑 -->
    <!-- 게시글 저장 -->
    <insert id="save" parameterType="com.study.domain.post.PostRequest" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO tb_post (
        <include refid="postColumns"/>
        ) VALUES (
        #{id}
        , #{title}
        , #{content}
        , #{writer}
        , 0
        , #{noticeYn}
        , 0
        , NOW()
        , NULL
        )
    </insert>

    <!-- resultType - SQL 쿼리의 실행 결과를 매핑할 결과 타입을 의미, Mapper.java 인터페이스에 선언한 메서드의 리턴타입과 동일한 타입으로 선언 -->
    <!-- 게시글 상세정보는 단일 정보를 조회한다 따라서 타입의 long을 넣는다 -->
    <!--    #{변수명} - MyBatis는 #{변수명} 표현식을 이용해서 전달받은 파라미터를 기준으로 쿼리를 실행 -->
    <!-- 게시글 상세정보 조회 -->
    <select id="findById" parameterType="Long" resultType="com.study.domain.post.PostResponse">
        SELECT
        <include refid="postColumns"/>
        FROM
        tb_post
        WHERE
        id = #{value}
    </select>

    <!-- 게시글 수정 -->
    <update id="update" parameterType="com.study.domain.post.PostRequest">
        UPDATE tb_post
        SET modified_date = NOW()
          , title         = #{title}
          , content       = #{content}
          , writer        = #{writer}
          , view_cnt      = #{viewCnt}
          , notice_yn     = #{noticeYn}
        WHERE id = #{id}
    </update>

    <!-- 게시글 삭제 -->
    <delete id="deleteById" parameterType="long">
        UPDATE tb_post
        SET delete_yn = 1
        WHERE id = #{id}
    </delete>

    <!-- LIMIT 구문은 SELECT 쿼리와 함께 사용, 반환되는 데이터(레코드)의 개수를 지정할 수 있다. -->
    <!-- #{offset} - MyBatis에서 쿼리의 parameterType이 클래스의 객체인 경우, XML Mapper의 #{parameter}는
        멤버 변수의 getter에 해당된다. 쉽게 말해, get() 메서드를 이용해서 쿼리에 파라미터를 바인딩하는 개념
        ex) page를 3으로, recordSize를 10으로 가정해보면 (3-1)*10 = 20 이다. 즉, 현재 페이지 번호가 3이라면
            "LIMIT 20, 10" 으로 쿼리가 실행되며, 결론적으로 offset은 조회할 데이터의 시작 위치(몇 번째 데이터부터 조회할 건지)를 의미 -->
    <!-- #{recordSize} - 시작 위치(offset)를 기준으로 조회할 데이터의 개수를 의미 -->
    <!-- 게시글 리스트 조회 -->
    <select id="findAll" parameterType="com.study.common.dto.SearchDto" resultType="com.study.domain.post.PostResponse">
        SELECT
        <include refid="postColumns"/>
        FROM
        tb_post
        WHERE
        delete_yn = 0
        <include refid="search"/>
        ORDER BY
        id DESC
        LIMIT #{pagination.limitStart}, #{recordSize}
    </select>

    <!-- 게시글 수 카운팅 -->
    <select id="count" parameterType="com.study.common.dto.SearchDto" resultType="int">
        SELECT
        COUNT(*)
        FROM
        tb_post
        WHERE
        delete_yn = 0
        <include refid="search"/>
    </select>

    <update id="viewCnt" parameterType="long">
        UPDATE
            tb_post
        SET view_cnt = view_cnt + 1
        WHERE id = #{id}
    </update>
</mapper>